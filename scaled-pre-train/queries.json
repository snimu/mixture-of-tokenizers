[
    {
        "name": "Ensemble Everything Everywhere",
        "source": "https://arxiv.org/abs/2408.05446",
        "text": "Adversarial examples pose a significant challenge to the robustness, reliability and alignment of deep neural networks. We propose a novel, easy-to-use approach to achieving high-quality representations that lead to adversarial robustness through the use of multi-resolution input representations and dynamic self-ensembling of intermediate layer predictions. We demonstrate that intermediate layer predictions exhibit inherent robustness to adversarial attacks crafted to fool the full classifier, and propose a robust aggregation mechanism based on Vickrey auction that we call \textit{CrossMax} to dynamically ensemble them. By combining multi-resolution inputs and robust ensembling, we achieve significant adversarial robustness on CIFAR-10 and CIFAR-100 datasets without any adversarial training or extra data, reaching an adversarial accuracy of ≈72% (CIFAR-10) and ≈48% (CIFAR-100) on the RobustBench AutoAttack suite (L∞=8/255) with a finetuned ImageNet-pretrained ResNet152. This represents a result comparable with the top three models on CIFAR-10 and a +5 % gain compared to the best current dedicated approach on CIFAR-100. Adding simple adversarial training on top, we get ≈78% on CIFAR-10 and ≈51% on CIFAR-100, improving SOTA by 5 % and 9 % respectively and seeing greater gains on the harder dataset. We validate our approach through extensive experiments and provide insights into the interplay between adversarial robustness, and the hierarchical nature of deep representations. We show that simple gradient-based attacks against our model lead to human-interpretable images of the target classes as well as interpretable image changes. As a byproduct, using our multi-resolution prior, we turn pre-trained classifiers and CLIP models into controllable image generators and develop successful transferable attacks on large vision language models."
    },
    {
        "name": "King James Bible",
        "source": "https://www.biblestudytools.com/obadiah/1.html, May 19th 2025",
        "text": "1 The vision of Obadiah. This is what the Sovereign LORD says about Edom— We have heard a message from the LORD: An envoy was sent to the nations to say, “Rise, let us go against her for battle”—\n2 “See, I will make you small among the nations; you will be utterly despised.\n3 The pride of your heart has deceived you, you who live in the clefts of the rocks and make your home on the heights, you who say to yourself, ‘Who can bring me down to the ground?’\n4 Though you soar like the eagle and make your nest among the stars, from there I will bring you down,” declares the LORD.\n5 “If thieves came to you, if robbers in the night— oh, what a disaster awaits you!— would they not steal only as much as they wanted? If grape pickers came to you, would they not leave a few grapes?\n6 But how Esau will be ransacked, his hidden treasures pillaged!\n7 All your allies will force you to the border; your friends will deceive and overpower you; those who eat your bread will set a trap for you,but you will not detect it.\n8 “In that day,” declares the LORD, “will I not destroy the wise men of Edom, those of understanding in the mountains of Esau?\n9 Your warriors, Teman, will be terrified, and everyone in Esau’s mountains will be cut down in the slaughter.\n10 Because of the violence against your brother Jacob, you will be covered with shame; you will be destroyed forever.\n11 On the day you stood aloof while strangers carried off his wealth and foreigners entered his gates and cast lots for Jerusalem, you were like one of them.\n12 You should not gloat over your brother in the day of his misfortune, nor rejoice over the people of Judah in the day of their destruction, nor boast so much in the day of their trouble.\n13 You should not march through the gates of my people in the day of their disaster, nor gloat over them in their calamity in the day of their disaster, nor seize their wealth in the day of their disaster.\n14 You should not wait at the crossroads to cut down their fugitives, nor hand over their survivors in the day of their trouble.\n15 “The day of the LORD is near for all nations. As you have done, it will be done to you; your deeds will return upon your own head.\n16 Just as you drank on my holy hill, so all the nations will drink continually; they will drink and drink and be as if they had never been.\n17 But on Mount Zion will be deliverance; it will be holy, and Jacob will possess his inheritance.\n18 Jacob will be a fire and Joseph a flame; Esau will be stubble, and they will set him on fire and destroy him. There will be no survivors from Esau.” The LORD has spoken.\n19 People from the Negev will occupy the mountains of Esau, and people from the foothills will possess the land of the Philistines. They will occupy the fields of Ephraim and Samaria, and Benjamin will possess Gilead.\n20 This company of Israelite exiles who are in Canaan will possess the land as far as Zarephath; the exiles from Jerusalem who are in Sepharad will possess the towns of the Negev.\n21 Deliverers will go up on Mount Zion to govern the mountains of Esau. And the kingdom will be the LORD’s."
    },
    {
        "name": "uv",
        "source": "https://docs.astral.sh/uv/getting-started/features/#the-pip-interface, May 19th 2025",
        "text": "Getting started\nFeatures\nuv provides essential features for Python development — from installing Python and hacking on simple scripts to working on large projects that support multiple Python versions and platforms.\n\nuv's interface can be broken down into sections, which are usable independently or together.\n\nPython versions\nInstalling and managing Python itself.\n\nuv python install: Install Python versions.\nuv python list: View available Python versions.\nuv python find: Find an installed Python version.\nuv python pin: Pin the current project to use a specific Python version.\nuv python uninstall: Uninstall a Python version.\nSee the guide on installing Python to get started.\n\nScripts\nExecuting standalone Python scripts, e.g., example.py.\n\nuv run: Run a script.\nuv add --script: Add a dependency to a script\nuv remove --script: Remove a dependency from a script\nSee the guide on running scripts to get started.\n\nProjects\nCreating and working on Python projects, i.e., with a pyproject.toml.\n\nuv init: Create a new Python project.\nuv add: Add a dependency to the project.\nuv remove: Remove a dependency from the project.\nuv sync: Sync the project's dependencies with the environment.\nuv lock: Create a lockfile for the project's dependencies.\nuv run: Run a command in the project environment.\nuv tree: View the dependency tree for the project.\nuv build: Build the project into distribution archives.\nuv publish: Publish the project to a package index.\nSee the guide on projects to get started.\n\nTools\nRunning and installing tools published to Python package indexes, e.g., ruff or black.\n\nuvx / uv tool run: Run a tool in a temporary environment.\nuv tool install: Install a tool user-wide.\nuv tool uninstall: Uninstall a tool.\nuv tool list: List installed tools.\nuv tool update-shell: Update the shell to include tool executables.\nSee the guide on tools to get started.\n\nThe pip interface\nManually managing environments and packages — intended to be used in legacy workflows or cases where the high-level commands do not provide enough control.\n\nCreating virtual environments (replacing venv and virtualenv):\n\nuv venv: Create a new virtual environment.\nSee the documentation on using environments for details.\n\nManaging packages in an environment (replacing pip and pipdeptree):\n\nuv pip install: Install packages into the current environment.\nuv pip show: Show details about an installed package.\nuv pip freeze: List installed packages and their versions.\nuv pip check: Check that the current environment has compatible packages.\nuv pip list: List installed packages.\nuv pip uninstall: Uninstall packages.\nuv pip tree: View the dependency tree for the environment.\nSee the documentation on managing packages for details.\n\nLocking packages in an environment (replacing pip-tools):\n\nuv pip compile: Compile requirements into a lockfile.\nuv pip sync: Sync an environment with a lockfile.\nSee the documentation on locking environments for details."
    },
    {
        "name": "Tokens vs. Bytes",
        "source": "https://snimu.github.io/2025/03/07/tokens-vs-bytes.html, March 19th 2025",
        "text": "Tokens vs. Bytes\nPosted on March 7, 2025\nCompared to bytes, tokens have two advantages: 1) They lead to shorter sequence lengths; 2) Their embeddings contain trainset-wide statistics on the specific combination of bytes that they consist of. They also have two disadvantages: 1) They are poorly legible; 2) They encourage memorization.\n\nAdvantages\nTokens lead to shorter sequence lengths\nThis point is obvious, and the main purpose of tokens. If you have a larger vocabulary, you are more likely to stumble upon tokens containing more bytes, which leads to shorter sequence lengths while covering the same information, which is very useful. Let’s move on.\n\nTokens contain trainset-wide statistics\nWhat is my evidence for this claim?\n\nThe first clue is that, beyond shortening the sequence length, having a larger vocabulary improves LLM eval scores. This must be due to the additional parameters in some way, but there is something strange about that: Most tokens can be split up into other tokens (ultimately, bytes), and are therefore redundant. So why do their embeddings, which are placed before the rest of the model and thus don’t interact with the other tokens in any sequence, lead to improved LLM performance? The only answer I can think of is that during training, they do interact with the embeddings of other tokens, via the backward pass. “Embeddings are in the middle of the model”, and thus the embedding layer can learn global, trainset-wide statistics about the specific combination of bytes that each token consists of, relative to the other combinations of bytes (tokens) in the same sequence. In a sense, it does statically what batch-norm does dynamically.\n\nA second piece of evidence is that the Byte Latent Transformer replicates this approach by dynamically adding n-gram embeddings to each byte embedding (see my article on the Byte Latent Transformer). To be precise: for every possible n-gram (for several values of n), they create an entry in the vocabulary, and for every byte, they add the embedding of the n-gram ending in the byte to the embedding of the byte itself. This is obviously extremely similar to tokens, except in a more sliding-window fashion. According to the authors themselves, this is crucial for the model to perform as well as it does."
    },
    {
        "name": "Wikipedia: Chester Cathedral",
        "source": "https://en.wikipedia.org/wiki/Chester_Cathedral, March 19th, 2025",
        "text": "Chester Cathedral is a Church of England cathedral and the mother church of the Diocese of Chester. It is located in the city of Chester, Cheshire, England. The cathedral, formerly the abbey church of a Benedictine monastery dedicated to Saint Werburgh, is dedicated to Christ and the Blessed Virgin Mary. Since 1541, it has been the seat of the bishop of Chester.\n\nThe cathedral is a Grade I listed building, and part of a heritage site that also includes the former monastic buildings to the north, which are also listed Grade I. The cathedral's construction dates from between the 10th century[3] and the early 16th century, having been modified a number of times throughout history, a typical characteristic of English cathedrals; however, the site itself may have been used for Christian worship since Roman times. All the major styles of English medieval architecture, from Norman to Perpendicular, are represented in the present building.[1][4]\n\nThe cathedral and former monastic buildings were extensively restored during the 19th century (amidst some controversy), and a free standing bell tower was added in the 20th century. In addition to holding services for Christian worship, the buildings are a major tourist attraction in Chester and the cathedral is used as a venue for concerts and exhibitions.\n\nHistory\nThe city of Chester was an important Roman stronghold. There may have been a Christian basilica on the site of the present cathedral in the late Roman era,[5] while Chester was controlled by Legio XX Valeria Victrix.[6] Legend holds that the basilica was dedicated to Saint Paul and Saint Peter.[7] This is supported by evidence that in Saxon times the dedication of an early chapel on this site was changed from Saint Peter to Saint Werburgh.[8] In 958 King Edgar granted land to the Minster of St Werburgh in Chester.[9]\n\nDuring the Early Middle Ages Barloc of Norbury, a Catholic Celtic saint and hermit,[10] was venerated at Chester Cathedral with a feast day on 10 September. He is known to history mainly through the hagiography of the Secgan manuscript;[11] he also occurs in a litany in MS Tanner 169* of the Bodleian Library, Oxford.[12]\n\nIn 907 Chester was refortified against the threat from the Vikings, and shortly afterwards the minster was founded or refounded, and Werburgh's remains were transferred there from Hanbury, probably by Æthelflæd, Lady of the Mercians.[13] The collegiate church, as it was then, was restored in 1057 by Leofric, Earl of Mercia, and Lady Godiva. This church was razed to the ground around 1090, with the secular canons evicted, and no known trace of it remains.[14]"
    },
    {
        "name": "Wikipedia: Malcolm X",
        "source": "https://en.wikipedia.org/wiki/Malcolm_X, March 19th, 2025",
        "text": "Malcolm X (born Malcolm Little, later el-Hajj Malik el-Shabazz; May 19, 1925 – February 21, 1965) was an African American revolutionary, Muslim minister and human rights activist who was a prominent figure during the civil rights movement until his assassination in 1965. A spokesman for the Nation of Islam (NOI) until 1964 after which he left the movement, he was a vocal advocate for Black empowerment and the promotion of Islam within the African American community. A controversial figure accused of preaching violence, Malcolm X is also a widely celebrated figure within African American and Muslim communities for his pursuit of racial justice.\n\nMalcolm spent his adolescence living in a series of foster homes or with relatives after his father's death and his mother's hospitalization. He committed various crimes, being sentenced to eight to ten years in prison in 1946 for larceny and burglary. In prison, he joined the Nation of Islam, adopting the name Malcolm X to symbolize his unknown African ancestral surname while discarding \"the white slavemaster name of 'Little'\", and after his parole in 1952, he quickly became one of the organization's most influential leaders. He was the public face of the organization for 12 years, advocating Black empowerment and separation of Black and White Americans, and criticizing Martin Luther King Jr. and the mainstream civil rights movement for its emphasis on non-violence and racial integration. Malcolm X also expressed pride in some of the Nation's social welfare achievements, such as its free drug rehabilitation program. From the 1950s onward, Malcolm X was subjected to surveillance by the Federal Bureau of Investigation (FBI).\n\nIn the 1960s, Malcolm X began to grow disillusioned with the Nation of Islam, as well as with its leader, Elijah Muhammad. He subsequently embraced Sunni Islam and the civil rights movement after completing the Hajj to Mecca and became known as \"el-Hajj Malik el-Shabazz\", which roughly translates to \"The Pilgrim Malcolm the Patriarch\". After a brief period of travel across Africa, he publicly renounced the Nation of Islam and founded the Islamic Muslim Mosque, Inc. (MMI) and the Pan-African Organization of Afro-American Unity (OAAU). Throughout 1964, his conflict with the Nation of Islam intensified, and he was repeatedly sent death threats. On February 21, 1965, he was assassinated in New York City. Three Nation members were charged with the murder and given indeterminate life sentences. In 2021, two of the convictions were vacated. Speculation about the assassination and whether it was conceived or aided by leading or additional members of the Nation, or with law enforcement agencies, has persisted for decades.\n\nHe was posthumously honored with Malcolm X Day, on which he is commemorated in various cities across the United States. Hundreds of streets and schools in the U.S. have been renamed in his honor, while the Audubon Ballroom, the site of his assassination, was partly redeveloped in 2005 to accommodate the Malcolm X and Dr. Betty Shabazz Memorial and Educational Center. A posthumous autobiography, on which he collaborated with Alex Haley, was published in 1965."
    },
    {
        "name": "Wikipedia: Copyright Act 1911",
        "source": "https://en.wikipedia.org/wiki/Copyright_Act_1911, March 19th, 2025",
        "text": "From Wikipedia, the free encyclopedia\nCopyright Act 1911\nAct of Parliament\n\nParliament of the United Kingdom\nLong titleAn Act to amend and consolidate the Law relating to Copyright.\nCitation1 & 2 Geo. 5. c. 46\nDates\nRoyal assent16 December 1911\nCommencement1 July 1912\nRepealed5 November 1956 (in the United Kingdom)\n21 January 1958 (in India)\n1 May 1969 (in Australia)\n1 January 1979 (in South Africa)\n10 April 1987 (in Singapore)\n1 December 1987 (in Malaysia)\n1 January 1995 (in New Zealand)\n27 June 1997 (in Hong Kong)\n25 May 2008 (in Israel)\n24 May 2019 (final repeal, in Myanmar)\nOther legislation\nAmended byteCopyright (British Museum) Act 1915\nRepealed byteCopyright Act 1956 and Statute Law (Repeals) Act 1986 (in the United Kingdom)\nCopyright Act 1957 (in India)\nCopyright Act 1968 (in Australia)\nCopyright Act, 1978 (in South Africa)\nCopyright Act 1987 (Singapore) (in Singapore)\nCopyright Act 1987 (Malaysia) (in Malaysia)\nCopyright Act 1994 (in New Zealand)\nCopyright Ordinance (Cap 528) (in Hong Kong)\nCopyright Law 5778-2007 (in Israel)\nLiterary and Artistic Copyright Law 2019 (in Myanmar)[1]\nStatus: Repealed\nText of statute as originally enacted\nThe Copyright Act 1911 (1 & 2 Geo. 5. c. 46), also known as the Imperial Copyright Act 1911, was an act of the Parliament of the United Kingdom (UK) which received royal assent on 16 December 1911.[2] The act established copyright law in the UK and the British Empire. The act amended existing UK copyright law, as recommended by a royal commission in 1878[3] and repealed all previous copyright legislation that had been in force in the UK.[4] The act also implemented changes arising from the first revision of the Berne Convention for the Protection of Literary and Artistic Works in 1908.[4]\n\nThe act came into force in the UK on 1 July 1912, in the Channel Islands (except Jersey) on 1 July 1912, in Jersey on 8 March 1913, and in the Isle of Man on 5 July 1912. The Copyright Act 1911 applied or extended to all parts of the British Empire. In India the act came into force on 30 October 1912 (with some modifications in terms of its application to Indian law enacted in 1914), in Burma (then a province of British India) on 24 February 1914,[5] in Papua on 1 February 1931, and all other British possessions on 1 July 1912. It was subsequently enacted on various dates in the self-governing dominions and \"territories under protection\" of the British Empire.[6] \"The Copyright Act 1911 (extension to Palestine), 1924 Ordinance\" covered Mandatory Palestine and later the State of Israel, where in the latter it remained the governing statute until the Israeli 2007 Copyright Act took effect on 25 May 2008.[7]"
    },
    {
        "name": "Wikipedia: BAT99-98",
        "source": "https://en.wikipedia.org/wiki/BAT99-98, March 19th, 2025",
        "text": "BAT99-98 is a Wolf–Rayet star located in the Large Magellanic Cloud, in NGC 2070 near the R136 cluster in the Tarantula Nebula (30 Doradus). At 226 M☉ and 5,000,000 L☉ it is the most massive known star, and close to one of the most luminous stars currently known.[3]\n\nObservations\nA 1978 survey carried out by Jorge Melnick covered the 30 Doradus region and found six new Wolf–Rayet (WR) stars, all belonging to the WN sequence. The survey observed stars that were above[clarification needed] apparent magnitude 14 and within 2 arcminutes of the centre of the 30 Doradus nebula, and the star now known as BAT99‑98 was labelled as star J. It was found to have a magnitude of 13.5 and a spectral type of WN5.[5]\n\nThe following year, thirteen new WR stars in the Large Magellanic Cloud were reported, one of which was Mel J. It was numbered 12, and referred to as AB12, or LMC AB12 to distinguish it from the better-known AB stars in the Small Magellanic Cloud.[6]\n\nMelnick conducted another study of stars in NGC 2070 and gave BAT99-98 the number 49, reclassifying its spectral type as WN7.[7]\n\nNeither the AB12 nor the Mel J designation is in common use, although \"Melnick 49\" is sometimes seen. More commonly, LMC Wolf–Rayet stars are referred to by R (Radcliffe Observatory) numbers, Brey (Breysacher catalogue numbers[8]), or BAT99 numbers.[9]\n\nCharacteristics\nBAT99‑98 is located near the R136 cluster and has similar mass–luminosity properties to the massive stars in the cluster itself. It is estimated that the star held 250 M☉ at its birth and has since lost 20 M☉.[3] It sheds a large amount of mass through a stellar wind that moves at 1,600 km/s.[3] The star has a surface temperature of 45,000 K and a luminosity of 5,000,000 L☉. Although the star is very luminous due to its high temperature, much of that light is ultraviolet and invisible to humans – making it 141,000 times brighter than the Sun visually. It is now classified as a WN6 star, and models suggest that it is 7.5 million years old."
    }
]
